#!/usr/bin/env python

Import("env")
Import("env_modules")

env_raycast = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_embree"]:
    thirdparty_dir = "#thirdparty/embree/"

    embree_src = [
        "common/sys/sysinfo.cpp",
        "common/sys/alloc.cpp",
        "common/sys/estring.cpp",
        "common/sys/filename.cpp",
        "common/sys/library.cpp",
        "common/sys/thread.cpp",
        "common/sys/regression.cpp",
        "common/sys/mutex.cpp",
        "common/sys/condition.cpp",
        "common/sys/barrier.cpp",
        "common/math/constants.cpp",
        "common/simd/sse.cpp",
        "common/lexers/stringstream.cpp",
        "common/lexers/tokenstream.cpp",
        "common/tasking/taskschedulerinternal.cpp",
        "kernels/common/device.cpp",
        "kernels/common/stat.cpp",
        "kernels/common/acceln.cpp",
        "kernels/common/accelset.cpp",
        "kernels/common/state.cpp",
        "kernels/common/rtcore.cpp",
        "kernels/common/rtcore_builder.cpp",
        "kernels/common/scene.cpp",
        "kernels/common/scene_verify.cpp",
        "kernels/common/alloc.cpp",
        "kernels/common/geometry.cpp",
        "kernels/common/scene_triangle_mesh.cpp",
        "kernels/geometry/primitive4.cpp",
        "kernels/builders/primrefgen.cpp",
        "kernels/bvh/bvh.cpp",
        "kernels/bvh/bvh_statistics.cpp",
        "kernels/bvh/bvh4_factory.cpp",
        "kernels/bvh/bvh8_factory.cpp",
        "kernels/bvh/bvh_collider.cpp",
        "kernels/bvh/bvh_rotate.cpp",
        "kernels/bvh/bvh_refit.cpp",
        "kernels/bvh/bvh_builder.cpp",
        "kernels/bvh/bvh_builder_morton.cpp",
        "kernels/bvh/bvh_builder_sah.cpp",
        "kernels/bvh/bvh_builder_sah_spatial.cpp",
        "kernels/bvh/bvh_builder_sah_mb.cpp",
        "kernels/bvh/bvh_builder_twolevel.cpp",
        "kernels/bvh/bvh_intersector1_bvh4.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
    ]

    embree_avx_src = [
        "kernels/geometry/primitive8.cpp",
        "kernels/bvh/bvh_intersector1_bvh8.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh8.cpp",
        "kernels/bvh/bvh_intersector_hybrid8_bvh4.cpp",
        "kernels/bvh/bvh_intersector_hybrid8_bvh8.cpp",
    ]

    embree_avx512_src = [
        "kernels/bvh/bvh_intersector_hybrid16_bvh4.cpp",
        "kernels/bvh/bvh_intersector_hybrid16_bvh8.cpp",
    ]

    if env["builtin_embree_isa"] not in ["sse2", "sse42"]:
        embree_src += embree_avx_src

    if env["builtin_embree_isa"] == "avx512":
        embree_src += embree_avx512_src

    thirdparty_sources = [thirdparty_dir + file for file in embree_src]

    env_raycast.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "include"])
    env_raycast.Append(CPPDEFINES=["EMBREE_LOWEST_ISA", "TASKING_INTERNAL"])
    env_raycast.AppendUnique(CPPDEFINES=["NDEBUG"])  # No assert() even in debug builds.

    # These defines are used for MSVC (to signal SSE support) and for ARM (to enable use of NEON in Embree code)
    sse2_defines = ["__SSE__", "__SSE2__"]
    sse42_defines = ["__SSE4_1__", "__SSE4_2__"]
    if env.msvc:
        sse42_defines = sse2_defines + ["__SSE3__", "__SSSE3__"] + sse42_defines
    avx_defines = ["__AVX__", "__BMI__", "__BMI2__", "__LZCNT__"] + sse42_defines
    avx2_defines = ["__AVX2__"] + avx_defines

    if env.msvc:
        sse2_flags = ["/arch:SSE2"]
        sse42_flags = ["/arch:SSE2"]  # There's no flag to enable SSE4.2, and Embree can still use SSE4.2 instructions without it.
        avx_flags = ["/arch:AVX"]
        avx2_flags = ["/arch:AVX2"]
        avx512_flags = ["/arch:AVX512"]
    else:
        sse2_flags = ["-msse", "-msse2"]
        sse42_flags = ["-msse4.2"]
        avx_flags = ["-mavx"]
        avx2_flags = ["-mf16c", "-mavx2", "-mfma", "-mlzcnt", "-mbmi", "-mbmi2"]
        avx512_flags = ["-mavx512f", "-mavx512dq", "-mavx512cd", "-mavx512bw", "-mavx512vl", *avx2_flags, "-mprefer-vector-width=256"]

        # Prevent -march from affecting the used instruction set
        no_avx512_flags = ["-mno-avx512f", "-mno-avx512dq", "-mno-avx512cd", "-mno-avx512bw", "-mno-avx512vl"]
        no_avx2_flags = ["-mno-f16c", "-mno-avx2", "-mno-fma", "-mno-lzcnt", "-mno-bmi", "-mno-bmi2"]
        no_avx_flags = ["-mno-avx"]
        no_sse42_flags = ["-mno-sse4.2"]

        sse2_flags += no_sse42_flags + no_avx_flags + no_avx2_flags + no_avx512_flags
        sse42_flags += no_avx_flags + no_avx2_flags + no_avx512_flags
        avx_flags += no_avx2_flags + no_avx512_flags
        avx2_flags += no_avx512_flags

    arm = env["arch"] in ["arm32", "arm64"]

    if env["builtin_embree_isa"] == "sse2":
        env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_SSE2"])

        if not arm:
            env_raycast.Append(CCFLAGS=sse2_flags)

        if env.msvc or arm:
            env_raycast.Append(CPPDEFINES=sse2_defines)

        if env["platform"] == "windows" and not env.msvc and env["arch"] == "x86_32":
            env_raycast.Append(CCFLAGS=["-mstackrealign"])
    elif env["builtin_embree_isa"] == "sse42":
        env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_SSE42"])

        if not arm:
            env_raycast.Append(CCFLAGS=sse42_flags)

        if env.msvc or arm:
            env_raycast.Append(CPPDEFINES=sse42_defines)

        if env["platform"] == "windows" and not env.msvc and env["arch"] == "x86_32":
            env_raycast.Append(CCFLAGS=["-mstackrealign"])
    elif env["builtin_embree_isa"] == "avx":
        env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_AVX"])

        if not arm:
            env_raycast.Append(CCFLAGS=avx_flags)
        else:
            env_raycast.Append(CPPDEFINES=avx_defines)
    elif env["builtin_embree_isa"] == "avx2":
        env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_AVX2"])

        if not arm:
            env_raycast.Append(CCFLAGS=avx2_flags)
        else:
            env_raycast.Append(CPPDEFINES=avx2_defines)
    elif env["builtin_embree_isa"] == "avx512":
        env_raycast.Append(CPPDEFINES=["EMBREE_TARGET_AVX512"])

        if not arm:
            env_raycast.Append(CCFLAGS=avx512_flags)

    if env["platform"] == "windows":
        if env.msvc:
            env.Append(LINKFLAGS=["psapi.lib"])
        else:
            env.Append(LIBS=["psapi"])

    if env.msvc:  # Disable bogus warning about intentional struct padding.
        env_raycast.Append(CCFLAGS=["/wd4324"])

    env_thirdparty = env_raycast.Clone()
    env_thirdparty.force_optimization_on_debug()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)

    if env["platform"] == "web":
        env_thirdparty.Append(CXXFLAGS=["-msimd128"])

    if not env.msvc:
        # Flags synced with upstream gnu.cmake.
        if env["arch"] == "arm64" and env["platform"] == "linuxbsd" and not env["use_llvm"]:
            env_thirdparty.Append(CXXFLAGS=["-flax-vector-conversions"])

        env_thirdparty.Append(
            CXXFLAGS=[
                "-fno-strict-overflow",
                "-fno-delete-null-pointer-checks",
                "-fwrapv",
                "-fsigned-char",
                "-fno-strict-aliasing",
                "-fno-tree-vectorize",
                "-fvisibility=hidden",
                "-fvisibility-inlines-hidden",
            ]
        )

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_raycast.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
